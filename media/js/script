var canvas = document.getElementById("canvas");
canvas.width = innerWidth / 2;
canvas.height = innerHeight;
var c = canvas.getContext('2d');
var keys = [];
addEventListener('keydown', function (e) {
    keys[e.keyCode] = true;
});
addEventListener('keyup', function (e) {
    keys[e.keyCode] = false;
});

var mycar = new Image();
var obs1 = new Image();
var obs2 = new Image();
var obs3 = new Image();
var obs4 = new Image();
obs1.src = 'media/img/obs1.png';
obs2.src = 'media/img/obs2.png';
obs3.src = 'media/img/obs3.png';
obs4.src = 'media/img/obs.png';
var bg = new Image();
bg.src = 'media/img/road2.png';
mycar.src = 'media/img/mycar.png';

var loadedImages = 0;
var myScore = 0.0;
var xinged = 0;

function imageLoaded() {
    loadedImages++;
}
mycar.onload = imageLoaded;
bg.onload = imageLoaded;
obs1.onload = imageLoaded;
obs2.onload = imageLoaded;
obs3.onload = imageLoaded;
obs4.onload = imageLoaded;

var carCount = 4;
var obsSpeed = 2;
var obstacles = [];

var crashes = 0;
var cooldown = false;
var hearts = 3;

for (var i = 0; i < carCount; i++) {
    obstacles.push(new Obstacles(i));
}

function Obstacles(order) {
    this.order = order;
    this.x = (Math.random() * (canvas.width - 100)) + 50;
    this.y = -250 * this.order - 300;

    var obstacleImages = [obs1, obs2, obs3, obs4];
    this.image = obstacleImages[Math.floor(Math.random() * obstacleImages.length)];

    this.draw = function () {
        this.y += obsSpeed;
        if (this.y >= canvas.height) {
            xinged++;
            while (true) {
                this.x = (Math.random() * (canvas.width - 100)) + 50;
                this.y = -400 * Math.random() - 300;
                var overlapping = false;
                for (var i = 0; i < carCount; i++) {
                    if (i != this.order) {
                        if ((Math.abs(obstacles[i].x - this.x) < 100) &&
                            (Math.abs(obstacles[i].y - this.y) < 200)) {
                            overlapping = true;
                            break;
                        }
                    }
                }
                if (!overlapping) {
                    break;
                }
            }
        }
        c.drawImage(this.image, this.x, this.y, 100, 200);
    }
}

var bgy1 = 0;
var bgy2 = -canvas.height;
var dbgy = 3;
var myCarX = canvas.width / 2 - 50;

function updateHearts() {
    var heartsHtml = "❤️".repeat(hearts);
    document.getElementById('hearts').innerHTML = heartsHtml;
}

function getMaxHearts() {
    if (hearts < 3) return 3;
    if (hearts < 4 && myScore >= 50) return 4;
    if (hearts < 5 && myScore >= 150) return 5;
    if (hearts < 6 && myScore >= 250) return 6;
    if (hearts < 7 && myScore >= 350) return 7;
    if (hearts < 8 && myScore >= 450) return 8;
    if (hearts < 9 && myScore >= 550) return 9;
    if (hearts < 10 && myScore >= 650) return 10;
    return hearts; 
}

function update() {
    if (loadedImages == 6) {
        bgy1 += dbgy;
        bgy2 += dbgy;
        if (keys[37] && myCarX > 0) {
            myCarX -= 4;
        }
        if (keys[39] && myCarX < canvas.width - 100) {
            myCarX += 4;
        }
        c.clearRect(0, 0, canvas.width, canvas.height);
        myScore += 0.1;

        
        if (Math.floor(myScore) % 50 === 0 && myScore > 0 && hearts < getMaxHearts()) {
            hearts++;
            updateHearts();
        }

        if (myScore > 100) {
            dbgy += 0.05;
            obsSpeed += 0.05;
        }

        document.getElementById('score').innerHTML = "Score: " + parseInt(myScore);
        if (bgy2 >= 0) {
            bgy1 = 0;
            bgy2 = -canvas.height;
        }
        c.drawImage(bg, 0, bgy1, canvas.width, canvas.height);
        c.drawImage(bg, 0, bgy2, canvas.width, canvas.height);
        c.drawImage(mycar, myCarX, canvas.height - 220, 100, 200);
        for (var i = 0; i < carCount; i++) {
            obstacles[i].draw();
        }

        var overlapping = false;
        for (var i = 0; i < carCount; i++) {
            if ((Math.abs(obstacles[i].x - myCarX) < 95) &&
                (obstacles[i].y >= canvas.height - 400)) {
                overlapping = true;
                break;
            }
        }
        if (overlapping) {
            if (!cooldown && hearts > 0) {
                hearts--;
                cooldown = true;
                updateHearts();
                setTimeout(() => {
                    cooldown = false;
                }, 3000);
            }
            if (hearts <= 0) {
                loadedImages = -1;
                cancelAnimationFrame(animate);
                alert("Game Over!\nStats:\n========\nDistance: " + parseInt(myScore) +
                    "\nCars Avoided: " + xinged);
            }
        }
    }
}

function animate() {
    requestAnimationFrame(animate);
    update();
}

updateHearts(); 
animate();
